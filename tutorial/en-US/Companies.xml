<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "BizQLTutorial.ent">
%BOOK_ENTITIES;
]>
<chapter id="chap-BizQLTutorial-Companies">
	<title>Companies</title>
	<para> Companies submit filings to the SEC via the Edgar system.</para>
  <para>In the XBRL world, companies correspond to reporting <emphasis role="bold"
      >entities.</emphasis></para>
  <para>The XBRL connector provides two modules for working with companies. One of them is generic, the other one
    offers functionality that is specific to the SEC. Modules are identified with URIs (they look
    very much like Web site addresses), in this
    case:<programlisting>http://xbrl.io/modules/bizql/entities
http://xbrl.io/modules/bizql/profiles/sec/companies</programlisting></para>

	<section id="sect-BizQLTutorial-Companies-Lookup">
		<title>Looking Up Companies</title>
	  <para>Let us begin with a very simple query that just lists the SEC companies. It is generic, so
	    it uses the entities module:</para>
	  <example>
	    <title>All companies</title>
	    <programlisting>import module namespace entities =
    "http://xbrl.io/modules/bizql/entities";

entities:entities()</programlisting>
	  </example>
	  <para>This query is just a function call. A function is identified with its prefix (here <code>entities:</code>)
	    and a name (here <code>entities</code>). This function takes no parameters.</para>
	  <para>In the XBRL connector, a company is represented by a JSON object, like so:</para>
	  <example>
	    <title>A company in JSON format</title>
	    <programlisting>{
  "_id" : "http://www.sec.gov/CIK 0000320193", 
  "Profiles" : {
    "SEC" : {
      "Name" : "SEC", 
      "CompanyName" : "APPLE INC", 
      "CompanyType" : "Corporation", 
      "CIK" : "0000320193", 
      "SIC" : "3571", 
      "SICDescription" : "ELECTRONIC COMPUTERS", 
      "SICGroup" : 3, 
      "Taxonomy" : "ci", 
      "Sector" : "Industrial/Commercial Machinery/Computer Equip
ment", 
      "Tickers" : [ "aapl" ], 
      "Tags" : [ "SP500", "FORTUNE100" ], 
      "IsTrust" : false
    }
  }
}</programlisting>
	  </example>
    <para>In the case of companies, most of the information is SEC-specific, and is embedded in a Profiles.SEC subobject. You will
see in other parts of the tutorial, that the Profiles.SEC subobject is not restricted to companies, but also applies to all other objects.</para>
	  <para>Companies can be
	    retrieved by tags (for example, indices) using the <code>companies-for-tags</code> function, in the companies module, like so:</para>
	  <example>
	    <title>All Dow 30 companies</title>
	    <programlisting>import module namespace companies =
    "http://xbrl.io/modules/bizql/profiles/sec/companies";

companies:companies-for-tags("DOW30")</programlisting>
	  </example>
	  <para>Almost all functions in the XBRL connector accept sequences as parameters. For example, you can get DOW30 and FORTUNE100 companies
in a single call. Mind the double parenthesis: you are passing one single sequence as a parameter, not two strings as two parameters.</para>
	  <example>
	    <title>All Dow 30 and Fortune 100 companies (companies in both indices will be returned twice)</title>
	    <programlisting>import module namespace companies =
    "http://xbrl.io/modules/bizql/profiles/sec/companies";

companies:companies-for-tags( ("DOW30", "FORTUNE100") )</programlisting>
	  </example>
	  <para>Companies are identified with CIKs. A CIK can be used to retrieve a company</para>
	  <example>
	    <title>Walt Disney by CIK</title>
	    <programlisting>import module namespace companies =
    "http://xbrl.io/modules/bizql/profiles/sec/companies";

companies:companies(1001039)</programlisting>
	  </example>
    <para>Here too, you can pass sequences.</para>
	  <example>
	    <title>American Express and Walt Disney by CIK</title>
	    <programlisting>import module namespace companies =
    "http://xbrl.io/modules/bizql/profiles/sec/companies";

companies:companies((4962, 1001039))</programlisting>
	  </example>
    <para>Companies by SIC (electronic and other electrical equipment, semiconductors and related devices).</para>
	  <example>
	    <title>American Express and Walt Disney by CIK</title>
	    <programlisting>import module namespace companies =
    "http://xbrl.io/modules/bizql/profiles/sec/companies";

companies:companies-for-SIC(("3600", "3674"))</programlisting>
	  </example>
	  <example>
      <title>Companies by sector (electronic)</title>
	    <programlisting>import module namespace companies =
    "http://xbrl.io/modules/bizql/profiles/sec/companies";

companies:companies-for-sector(
   "Electronic/Other Electrical Equipment/Components"
)</programlisting>
	  </example>
	  <example>
	    <title>JPMorgan and Walmart by ticker</title>
	    <programlisting>import module namespace companies =
    "http://xbrl.io/modules/bizql/profiles/sec/companies";

companies:companies-for-tickers(("jpm", "wmt"))</programlisting>
	  </example>
    <para>Using FLWOR expressions, you can build many interesting queries just with companies. For example, this
groups company names by sector, using the Sector and CompanyName fields in the SEC Profile.</para>
    <example>
      <title>All company names grouped by sector</title>
      <programlisting>import module namespace entities =
    "http://xbrl.io/modules/bizql/entities";

for $e in entities:entities()
let $s := $e.Profiles.SEC.Sector
group by $s
return {
  sector : $s,
  entities : [ $e.Profiles.SEC.CompanyName ]
}</programlisting>
    </example>
	</section>
  <section>
    <title>Querying Companies</title>
    <para>In the former section, we showed how to query indices. But which indices are available? Even if there were no documentation, the answer lies at
your fingertips.</para>
<para>One of the provided pieces of information for a company is the Tags field, which we use to stamp companies with indices. Using navigation syntax (the dot
navigates deep into an object, double square brackets with an integer into an array, empty square brackets extract the entire array)
      as well as the distinct-values builtin function, it is very easy to discover, in real time, all indices currently used over the entire database:</para>
    <example>
      <title>Discovering all indices in half a second's time</title>
      <programlisting>import module namespace entities =
    "http://xbrl.io/modules/bizql/entities";

distinct-values(entities:entities().Profiles.SEC.Tags[])</programlisting>
    </example>
    <para>Having done so, you will discover that the following indices are available.</para>
    <table frame="all">
      <title>Available indices</title>
      <tgroup cols="2">
        <colspec colname="c1" colnum="1" colwidth="1.0*"/>
        <colspec colname="c2" colnum="2" colwidth="1.0*"/>
        <thead>
          <row>
            <entry>Index</entry>
            <entry>Tag</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>S&amp;P 500</entry>
            <entry>SP500</entry>
          </row>
          <row>
            <entry>Dow 30</entry>
            <entry>DOW30</entry>
          </row>
          <row>
            <entry>Fortune 100</entry>
            <entry>FORTUNE100</entry>
          </row>
          <row>
            <entry>Providence Journal's Impact 50</entry>
            <entry>PJI</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>
  <section>
    <title>The SECXBRL.info REST API for companies</title>
    <para>For people without developer background, we provide a REST API that allows you to look up companies and, say, import them into an Excel
      spreadsheet. The API is documented <ulink url="http://www.secxbrl.info/api">here</ulink></para>
    <section>
      <title>Retrieve a company</title>
      <para>You can retrieve:</para>
      <para>
        <itemizedlist>
          <listitem>
            <para>All companies with <uri>http://secxbrl.xbrl.io/api/entities.jq</uri></para>
          </listitem>
          <listitem>
            <para>One or several companies by CIK with the <code>cik</code> parameter, like so:</para><para><uri>http://secxbrl.xbrl.io/api/entities.jq?cik=1412090&amp;cik=4962</uri></para>
          </listitem>
          <listitem>
            <para>Companies by (one or several) tag with the <code>tag</code> parameter, like so:</para><para><uri>http://secxbrl.xbrl.io/api/entities.jq?tag=DOW30</uri></para>
          </listitem>
          <listitem>
            <para>One or several companies by ticker with the <code>ticker</code> parameter, like so:</para><para><uri>http://secxbrl.xbrl.io/api/entities.jq?ticker=AAPL&amp;ticker=GOOG</uri></para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <section>
      <title>Select a format</title>
      <para>You can choose the format in which you would like to retrieve company information. By default, JSON will be output.</para>
      <para>
        <itemizedlist>
          <listitem>
            <para>In JSON with the <code>json</code> parameter, like so:</para><para><uri>http://secxbrl.xbrl.io/api/entities.jq?tag=DOW30&amp;format=json</uri></para>
          </listitem>
          <listitem>
            <para>In XML with the <code>xml</code> parameter, like so:</para><para><uri>http://secxbrl.xbrl.io/api/entities.jq?tag=DOW30&amp;format=xml</uri></para>
          </listitem>
          <listitem>
            <para>In CSV (comma-separated values, which you can open in good old Excel) with the <code>csv</code> parameter, like so:</para><para><uri>http://secxbrl.xbrl.io/api/entities.jq?tag=DOW30&amp;format=csv</uri></para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
  </section>
</chapter>
