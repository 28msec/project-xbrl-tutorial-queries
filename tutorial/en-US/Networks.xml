<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "SECTutorial.ent">
%BOOK_ENTITIES;
]>
<chapter id="chap-BizQLTutorial-Networks">
  <title>Networks</title>
  <para>A filing contains a lot of information. It makes sense to split this information in smaller components. For example a quarterly report
has a balanced sheet,
an income statement, some generic information about the filing, etc. In the SEC world, these are called <emphasis>networks</emphasis>.</para>
  <para>Physically, companies submit XBRL instances, possibly together with an extension taxonomy.</para>
  <para>The XBRL connector provides two modules for working with SEC networks. One of them is generic, the other one
    offers functionality that is specific to the SEC. In this
    case:
  <programlisting>http://xbrl.io/modules/bizql/components
http://xbrl.io/modules/bizql/profiles/sec/networks</programlisting></para>
  <para>However, the networks module is the most useful for working with SEC data, because of all the specificities of Edgar filings.</para>


  <section>
    <title>Looking Up Networks</title>
    <para>Let us begin with a very simple query that just lists the SEC networks contained in a filing, say, Coca Cola's Q1 for 2012.</para>
    <example>
      <title>The various components in Coca Cola's Q1 2012 filing.</title>
      <programlisting>import module namespace fiscal =
    "http://xbrl.io/modules/bizql/profiles/sec/fiscal/core";
import module namespace sec-networks =
    "http://xbrl.io/modules/bizql/profiles/sec/networks";

let $filing :=
    fiscal:filings-for-entities-and-fiscal-periods-and-years(
      21344,
      "Q1",
      2012
    )
return sec-networks:networks-for-filings($filing)</programlisting>
    </example>
    <para>In the XBRL connector, a network is represented by a JSON object. This object contains complex XBRL machinery to deal with
factual structures (XBRL hypercubes,
presentation networks, etc). Normally, you do not need to look into it, apart maybe from the statistics section that is similar to those of filings.</para>
    <para>A much more useful, SEC-specific representation of the network is called the model structure and we explain later how to access it.</para>
    <para>A certain number of networks are common to all filings, and stamped with a disclosure. Here is, for example, how to retrieve the balance
sheet in the above filing.</para>
    <para>
      <programlisting>import module namespace fiscal =
    "http://xbrl.io/modules/bizql/profiles/sec/fiscal/core";
import module namespace sec-networks =
    "http://xbrl.io/modules/bizql/profiles/sec/networks";

let $filing :=
    fiscal:filings-for-entities-and-fiscal-periods-and-years(
      21344,
      "FY",
      2012
    )
return sec-networks:networks-for-filings-and-disclosures(
    $filing,
    $sec-networks:BALANCE_SHEET
)
</programlisting>
    </para>
    <para>Other examples of available disclosures include the balance sheet, the income statement, the cash flow statement, document and entity information.</para>
  </section>


  <section>
    <title>The Model Structure</title>
    <para>
      <programlisting>import module namespace fiscal =
    "http://xbrl.io/modules/bizql/profiles/sec/fiscal/core";
import module namespace sec-networks =
    "http://xbrl.io/modules/bizql/profiles/sec/networks";

let $filing :=
    fiscal:filings-for-entities-and-fiscal-periods-and-years(
      21344,
      "FY",
      2012
    )
let $balance-sheet := sec-networks:networks-for-filings-and-disclosures(
    $filing,
    $sec-networks:BALANCE_SHEET
)
return sec-networks:model-structures($balance-sheet)
</programlisting>
    </para>
    <para>A model structure is just a hierarchy of so-called <emphasis>SEC report elements</emphasis> of different kinds. In that case:</para>
    <para>
      <programlisting>{
  "Kind" : "Abstract", 
  "Name" : "us-gaap:StatementOfFinancialPositionAbstract", 
  "Label" : "Statement of Financial Position [Abstract]", 
  "Children" : [ {
    "Kind" : "Table", 
    "Name" : "us-gaap:StatementTable", 
    "Label" : "Statement [Table]", 
    "Children" : [ {
      "Kind" : "LineItems", 
      "Name" : "us-gaap:StatementLineItems", 
      "Label" : "Statement [Line Items]", 
      "Children" : [ {
        "Kind" : "Abstract", 
        "Name" : "us-gaap:AssetsAbstract", 
        "Label" : "Assets [Abstract]", 
        "Children" : [ {
          "Kind" : "Concept", 
          "Name" : "us-gaap:Assets", 
          "Label" : "Assets", 
          "IsNillable" : true, 
          "IsAbstract" : false, 
          "PeriodType" : "instant", 
          "Balance" : "debit", 
          "SubstitutionGroup" : "xbrli:item", 
          "DataType" : "xbrli:monetaryItemType", 
          "BaseType" : "xbrli:monetary", 
          "ClosestSchemaBuiltinType" : "xs:decimal", 
          "IsTextBlock" : false
        }, ... ]
      }, ... ]
    }, {
      "Kind" : "Axis", 
      "Name" : "us-gaap:StatementScenarioAxis", 
      "Label" : "Scenario [Axis]", 
      "Children" : [ {
        "Kind" : "Member", 
        "Name" : "us-gaap:ScenarioUnspecifiedDomain", 
        "Label" : "Scenario, Unspecified [Domain]"
      } ]
    } ]
  } ]
}</programlisting>
    </para>
    <para>Here is a list of all reports elements (which form the model structure) used by SEC:</para>
    <table frame="all">
      <title>Report elements</title>
      <tgroup cols="2">
        <colspec colname="c1" colnum="1" colwidth="1.0*"/>
        <colspec colname="c2" colnum="2" colwidth="1.0*"/>
        <thead>
          <row>
            <entry>Report Element</entry>
            <entry>What it is</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>Table</entry>
            <entry>This is a "container" for all facts in this component. While it is called table, <emphasis>hypercube</emphasis> would be a more precise terminology because
it can have much more than two dimensions.</entry>
          </row>
          <row>
            <entry>LineItems</entry>
            <entry>This is the top-level element for the "rows" of the table.</entry>
          </row>
          <row>
            <entry>Abstract</entry>
            <entry>These are virtual rows, i.e., no facts are reported against them. They help organize concepts.</entry>
          </row>
          <row>
            <entry>Concept</entry>
            <entry>These are rows against which facts get reported.</entry>
          </row>
          <row>
            <entry>Axis</entry>
            <entry>Several facts can be reported for the same concept, but in different contexts. Axes help organize this. For example, an axis
can be used to delimit a region of the world to which the fact applies.</entry>
          </row>
          <row>
            <entry>Member</entry>
            <entry>A member is an axis value. Members can be organized in hierarchies as well (which is easy to understand if you think of regions of the world
for example).</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>


  <section>
    <title>The SECXBRL.info REST API for networks</title>
    <para>We also provide a REST API that allows you to look up networks and, say, import them into an Excel
      spreadsheet. The API is documented <ulink url="http://www.secxbrl.info/api">here</ulink></para>
    <section>
      <title>Retrieve a network</title>
      <para>You can retrieve the networks (components) in a filing using the <code>aid</code> parameter, like so:</para>
      <para><uri>http://secxbrl.xbrl.io/api/components.jq?aid=0000021344-13-000017</uri></para>
      <para>If you do not know the AIDs of the filings, you can use the same parameters as in the filings API (<code>cik</code>, <code>tag</code>, <code>ticker</code>,
<code>fiscalYear</code>, <code>fiscalPeriod</code>), or use the filings REST API  to retrieve it.</para>
    </section>
    <section>
      <title>Select a format</title>
      <para>You can also choose the format in which you would like to retrieve network information, like in the entities and filings APIs.</para>
      <para>For example, for Excel:</para>
      <para><uri>http://secxbrl.xbrl.io/api/components.jq?aid=0000021344-13-000017&amp;format=csv</uri></para>
    </section>
  </section>
</chapter>
